@page
@model Trustchain.Pages.Workflows.ListModel
@using Trustchain.Extensions

@{
    ViewData["Title"] = "Workflows";
}

<h2>Workflows</h2>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find:
            <input type="text" name="searchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-page="./Index">Reset</a>
        </p>
    </div>
</form>
@*<p>
    <a asp-page="Create">Create New</a>
</p>*@
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./List" asp-route-sortOrder="@Model.CurrentSortOrder!" asp-route-sortField="DatabaseID" asp-route-currentFilter="@Model.CurrentFilter" asp-route-type="@Model.WorkflowType" asp-route-pageIndex="@Model.List.PageIndex">
                    @Html.DisplayNameFor(model => model.WorkflowContainer[0].DatabaseID)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.WorkflowContainer[0].Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.WorkflowContainer[0].State)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.WorkflowContainer[0].Tag)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.WorkflowContainer[0].Data)
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.List) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.DatabaseID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.State)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.Tag)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Data)
            </td>*@
            <td>
                @if (HttpContext.Session.Get<bool>("isadmin") && Model.ShowRunNow(item)) {
                    <a asp-page-handler="RunNow" asp-route-id="@item.DatabaseID">Run now</a> @Html.Encode("|")
                } 
                @if (HttpContext.Session.Get<bool>("isadmin")) {
                    <a asp-page="./Edit" asp-route-id="@item.DatabaseID">Edit</a> @Html.Encode("|")
                }

                <a asp-page="./Details" asp-route-id="@item.DatabaseID">Details</a>
                @if (HttpContext.Session.Get<bool>("isadmin"))
                {
                    @Html.Encode("|") <a asp-page="./Delete" asp-route-id="@item.DatabaseID">Delete</a>
                }
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.List.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.List.HasNextPage ? "disabled" : "";
}

<a asp-page="./List"
   asp-route-sortOrder="@Model.CurrentSortOrder"
   asp-route-sortField="@Model.CurrentSortField"
   asp-route-pageIndex="@(Model.List.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   asp-route-type="@Model.WorkflowType"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-page="./List"
   asp-route-sortOrder="@Model.CurrentSortOrder"
   asp-route-sortField="@Model.CurrentSortField"
   asp-route-pageIndex="@(Model.List.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   asp-route-type="@Model.WorkflowType"
   class="btn btn-default @nextDisabled">
    Next
</a>
