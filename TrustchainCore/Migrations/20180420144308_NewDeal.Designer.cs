// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using TrustchainCore.Repository;

namespace TrustchainCore.Migrations
{
    [DbContext(typeof(TrustDBContext))]
    [Migration("20180420144308_NewDeal")]
    partial class NewDeal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("TrustchainCore.Model.KeyValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<byte[]>("Value");

                    b.HasKey("ID");

                    b.HasIndex("Key");

                    b.ToTable("KeyValues");
                });

            modelBuilder.Entity("TrustchainCore.Model.Package", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Algorithm");

                    b.Property<byte[]>("Id")
                        .IsRequired();

                    b.HasKey("DatabaseID");

                    b.HasAlternateKey("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("TrustchainCore.Model.Timestamp", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Algorithm");

                    b.Property<string>("Blockchain");

                    b.Property<int?>("PackageDatabaseID");

                    b.Property<byte[]>("Receipt");

                    b.Property<long>("Registered");

                    b.Property<string>("Service");

                    b.Property<byte[]>("Source");

                    b.Property<int?>("TrustDatabaseID");

                    b.Property<int>("WorkflowID");

                    b.HasKey("DatabaseID");

                    b.HasIndex("PackageDatabaseID");

                    b.HasIndex("Source");

                    b.HasIndex("TrustDatabaseID");

                    b.HasIndex("WorkflowID");

                    b.ToTable("Timestamp");
                });

            modelBuilder.Entity("TrustchainCore.Model.Trust", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("Activate");

                    b.Property<string>("Algorithm");

                    b.Property<string>("Claim");

                    b.Property<short>("Cost");

                    b.Property<uint>("Created");

                    b.Property<uint>("Expire");

                    b.Property<byte[]>("Id");

                    b.Property<int?>("PackageDatabaseID");

                    b.Property<string>("Type");

                    b.HasKey("DatabaseID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PackageDatabaseID");

                    b.ToTable("Trust");
                });

            modelBuilder.Entity("TrustchainCore.Model.WorkflowContainer", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<long>("NextExecution");

                    b.Property<string>("State");

                    b.Property<string>("Tag");

                    b.Property<string>("Type");

                    b.HasKey("DatabaseID");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("TrustchainCore.Model.Package", b =>
                {
                    b.OwnsOne("TrustchainCore.Model.ServerIdentity", "Server", b1 =>
                        {
                            b1.Property<int>("PackageDatabaseID");

                            b1.Property<byte[]>("Address");

                            b1.Property<byte[]>("Signature");

                            b1.Property<string>("Type");

                            b1.ToTable("Package");

                            b1.HasOne("TrustchainCore.Model.Package")
                                .WithOne("Server")
                                .HasForeignKey("TrustchainCore.Model.ServerIdentity", "PackageDatabaseID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("TrustchainCore.Model.Timestamp", b =>
                {
                    b.HasOne("TrustchainCore.Model.Package")
                        .WithMany("Timestamps")
                        .HasForeignKey("PackageDatabaseID");

                    b.HasOne("TrustchainCore.Model.Trust")
                        .WithMany("Timestamps")
                        .HasForeignKey("TrustDatabaseID");
                });

            modelBuilder.Entity("TrustchainCore.Model.Trust", b =>
                {
                    b.HasOne("TrustchainCore.Model.Package")
                        .WithMany("Trusts")
                        .HasForeignKey("PackageDatabaseID");

                    b.OwnsOne("TrustchainCore.Model.IssuerIdentity", "Issuer", b1 =>
                        {
                            b1.Property<int>("TrustDatabaseID");

                            b1.Property<byte[]>("Address");

                            b1.Property<byte[]>("Signature");

                            b1.Property<string>("Type");

                            b1.HasIndex("Address");

                            b1.ToTable("Trust");

                            b1.HasOne("TrustchainCore.Model.Trust")
                                .WithOne("Issuer")
                                .HasForeignKey("TrustchainCore.Model.IssuerIdentity", "TrustDatabaseID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TrustchainCore.Model.Scope", "Scope", b1 =>
                        {
                            b1.Property<int>("TrustDatabaseID");

                            b1.Property<string>("Type");

                            b1.Property<string>("Value");

                            b1.ToTable("Trust");

                            b1.HasOne("TrustchainCore.Model.Trust")
                                .WithOne("Scope")
                                .HasForeignKey("TrustchainCore.Model.Scope", "TrustDatabaseID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TrustchainCore.Model.SubjectIdentity", "Subject", b1 =>
                        {
                            b1.Property<int>("TrustDatabaseID");

                            b1.Property<byte[]>("Address");

                            b1.Property<byte[]>("Signature");

                            b1.Property<string>("Type");

                            b1.HasIndex("Address");

                            b1.ToTable("Trust");

                            b1.HasOne("TrustchainCore.Model.Trust")
                                .WithOne("Subject")
                                .HasForeignKey("TrustchainCore.Model.SubjectIdentity", "TrustDatabaseID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
